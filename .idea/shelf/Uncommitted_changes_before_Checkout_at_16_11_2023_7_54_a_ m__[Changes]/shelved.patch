Index: src/main/java/Proyecto/controllers/ClientePrincipalController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Proyecto.controllers;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\nimport Proyecto.enums.Ciudades;\r\nimport Proyecto.enums.Clima;\r\nimport Proyecto.model.AgenciaViajes;\r\nimport Proyecto.model.Cliente;\r\nimport Proyecto.model.Destino;\r\nimport Proyecto.utils.ArchivoUtils;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\n\r\npublic class ClientePrincipalController implements Initializable {\r\n\r\n    String rutaArchivo = \"src/main/resources/persistencia/clientes.txt\";\r\n    public AnchorPane misViajesForm;\r\n    private Cliente clienteAutenticado;\r\n\r\n    @FXML\r\n    private ResourceBundle resources;\r\n\r\n    @FXML\r\n    private URL location;\r\n\r\n    @FXML\r\n    private Button btnActualizarCliente;\r\n\r\n    @FXML\r\n    private Button btnBuscarpq;\r\n\r\n    @FXML\r\n    private Button btnCerrarSesion;\r\n\r\n    @FXML\r\n    private Button btnEstadistica;\r\n\r\n    @FXML\r\n    private Button btnNuevo;\r\n\r\n    @FXML\r\n    private Button btnPaquetes;\r\n\r\n    @FXML\r\n    private Button btnPerfii;\r\n\r\n    @FXML\r\n    private Button btnReservar;\r\n\r\n    @FXML\r\n    private Button btnReservas;\r\n\r\n    @FXML\r\n    private Button btnVerImagenes;\r\n\r\n    @FXML\r\n    private ComboBox<Ciudades> cbxCiudad;\r\n\r\n    @FXML\r\n    private ComboBox<Clima> cbxClima;\r\n\r\n    @FXML\r\n    private ComboBox<String> cbxDestino;\r\n\r\n    @FXML\r\n    private ComboBox<?> cbxPaquete;\r\n\r\n    @FXML\r\n    private ComboBox<?> cbxPrecio;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colCupo;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colDuracion;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colFechaDisponible;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colNombre;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colPrecio;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colServicioAdicional;\r\n\r\n    @FXML\r\n    private AnchorPane estadisticaForm;\r\n\r\n    @FXML\r\n    private ImageView imagenView;\r\n\r\n    @FXML\r\n    private DatePicker ldFechaIda;\r\n\r\n    @FXML\r\n    private DatePicker ldxFechaRegreso;\r\n\r\n    @FXML\r\n    private AnchorPane paquetesForm;\r\n\r\n    @FXML\r\n    private AnchorPane perfilForm;\r\n\r\n    @FXML\r\n    private AnchorPane reservaForm;\r\n\r\n    @FXML\r\n    private TableView<?> tblPqCliente;\r\n\r\n    @FXML\r\n    private TextField txtCorreoPerfil;\r\n\r\n    @FXML\r\n    private TextField txtDireccionPerfil;\r\n\r\n    @FXML\r\n    private TextField txtIdPerfil;\r\n\r\n    @FXML\r\n    private TextField txtNombrePerfil;\r\n\r\n    @FXML\r\n    private TextField txtTelefonoPerfil;\r\n\r\n    @FXML\r\n    void ActualizarPerfilCliente(ActionEvent event) {\r\n        // Aquí deberías obtener los nuevos datos del cliente desde la interfaz.\r\n        // Por ejemplo, puedes tener campos de texto editables y obtener sus valores.\r\n\r\n        String nuevoNombre = txtNombrePerfil.getText();\r\n        String nuevoCorreo = txtCorreoPerfil.getText();\r\n        String nuevaDireccion = txtDireccionPerfil.getText();\r\n        String nuevoTelefono = txtTelefonoPerfil.getText();\r\n\r\n        // Supongamos que obtienes los nuevos datos y actualizas el objeto Cliente.\r\n        clienteAutenticado.setNombreCompleto(nuevoNombre);\r\n        clienteAutenticado.setCorreo(nuevoCorreo);\r\n        clienteAutenticado.setDireccionResidencia(nuevaDireccion);\r\n        clienteAutenticado.setTelefono(nuevoTelefono);\r\n\r\n\r\n        // Ahora, actualiza los campos en la interfaz.\r\n        actualizarCampos();\r\n\r\n        // Muestra una alerta o realiza otras acciones según sea necesario.\r\n        mostrarAlerta(\"Cliente Actualizado\", \"Los datos del cliente se han actualizado con éxito.\", Alert.AlertType.INFORMATION);\r\n        String nuevaLinea = String.format(\"%s,%s,%s,%s,%s,%s\",\r\n                clienteAutenticado.getIdentificacion(),\r\n                clienteAutenticado.getPassword(),\r\n                clienteAutenticado.getNombreCompleto(),\r\n                clienteAutenticado.getCorreo(),\r\n                clienteAutenticado.getTelefono(),\r\n                clienteAutenticado.getDireccionResidencia());\r\n\r\n        actualizarDatosEnArchivo(nuevaLinea);\r\n    }\r\n    private void mostrarAlerta(String titulo, String mensaje, Alert.AlertType tipo) {\r\n        Alert alert = new Alert(tipo);\r\n        alert.setTitle(titulo);\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(mensaje);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private void actualizarCampos() {\r\n        txtIdPerfil.setText(clienteAutenticado.getIdentificacion());\r\n        txtNombrePerfil.setText(clienteAutenticado.getNombreCompleto());\r\n        txtCorreoPerfil.setText(clienteAutenticado.getCorreo());\r\n        txtDireccionPerfil.setText(clienteAutenticado.getDireccionResidencia());\r\n        txtTelefonoPerfil.setText(clienteAutenticado.getTelefono());\r\n    }\r\n\r\n\r\n\r\n    @FXML\r\n    void NuevopqCLiente(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void buscarPaqueteCliente(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void cerrarSesionClienteAction(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void mostrarVenCliente(ActionEvent event) {\r\n        if (event.getSource() == btnPerfii) {\r\n            perfilForm.setVisible(true);\r\n            reservaForm.setVisible(false);\r\n            paquetesForm.setVisible(false);\r\n            misViajesForm.setVisible(false);\r\n        } else if (event.getSource() == btnPaquetes) {\r\n            perfilForm.setVisible(false);\r\n            reservaForm.setVisible(false);\r\n            paquetesForm.setVisible(true);\r\n            misViajesForm.setVisible(false);\r\n        } else if (event.getSource() == btnReservas) {\r\n            perfilForm.setVisible(true);\r\n            reservaForm.setVisible(false);\r\n            paquetesForm.setVisible(false);\r\n            misViajesForm.setVisible(false);\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    @FXML\r\n    void reservarPq(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void verImagenesPq(ActionEvent event) {\r\n\r\n    }\r\n    private void actualizarDatosEnArchivo(String nuevaLinea) {\r\n        try {\r\n            List<String> datosActuales = ArchivoUtils.leerArchivoBufferedReader(rutaArchivo);\r\n\r\n            // Encuentra y reemplaza la línea existente con el nuevo dato.\r\n            // Supongamos que cada línea es única y se basa en la identificación del cliente.\r\n            for (int i = 0; i < datosActuales.size(); i++) {\r\n                if (datosActuales.get(i).contains(clienteAutenticado.getIdentificacion())) {\r\n                    datosActuales.set(i, nuevaLinea);\r\n                    break;  // Se encontró y actualizó la línea, sale del bucle.\r\n                }\r\n            }\r\n\r\n            // Guarda los datos actualizados en el archivo.\r\n            ArchivoUtils.escribirArchivoBufferedWriter(rutaArchivo, datosActuales, false);\r\n\r\n            // Muestra una alerta o realiza otras acciones según sea necesario.\r\n            mostrarAlerta(\"Actualización Exitosa\", \"Datos actualizados en el archivo.\", Alert.AlertType.INFORMATION);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            mostrarAlerta(\"Error de Actualización\", \"Hubo un error al actualizar el archivo.\", Alert.AlertType.ERROR);\r\n        }\r\n    }\r\n\r\n\r\n\r\n        public void initData(Cliente clienteAutenticado) {\r\n            this.clienteAutenticado = clienteAutenticado;\r\n\r\n            try {\r\n                // Lee los datos del archivo y busca la línea del cliente actual\r\n                List<String> lineasClientes = ArchivoUtils.leerArchivoBufferedReader(rutaArchivo);\r\n                for (String linea : lineasClientes) {\r\n                    String[] datosCliente = linea.split(\";\");\r\n\r\n                    // Supongamos que el primer campo es la identificación del cliente\r\n                    if (datosCliente.length > 0 && datosCliente[0].equals(clienteAutenticado.getIdentificacion())) {\r\n                        // Establece los datos en los campos correspondientes\r\n                        txtIdPerfil.setText(datosCliente[0]);\r\n                        txtNombrePerfil.setText(datosCliente[2]);\r\n                        txtCorreoPerfil.setText(datosCliente[3]);\r\n                        txtDireccionPerfil.setText(datosCliente[5]);\r\n                        txtTelefonoPerfil.setText(datosCliente[4]);\r\n                        break; // Rompe el bucle una vez que se ha encontrado y configurado el cliente\r\n                    }\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n                mostrarAlerta(\"Error de Lectura\", \"Hubo un error al leer el archivo.\", Alert.AlertType.ERROR);\r\n            }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n\r\n        cbxCiudad.getItems().setAll(Ciudades.values());\r\n        cbxClima.getItems().setAll(Clima.values());\r\n        List<Destino> listaDestinos = ArchivoUtils.leerDestinosDesdeArchivo(\"src/main/resources/persistencia/destinos.txt\");\r\n\r\n        System.out.println(listaDestinos);\r\n\r\n        // Llenar el ComboBox con los nombres de los destinos\r\n        for (Destino destino : listaDestinos) {\r\n            cbxDestino.getItems().add(destino.getNombre());\r\n        }\r\n\r\n\r\n        cbxDestino.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {\r\n            if (newValue != null) {\r\n                // Acciones cuando se selecciona un destino en el ComboBox\r\n                System.out.println(\"Destino seleccionado: \" + newValue);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Proyecto/controllers/ClientePrincipalController.java b/src/main/java/Proyecto/controllers/ClientePrincipalController.java
--- a/src/main/java/Proyecto/controllers/ClientePrincipalController.java	(revision c518af19509c93d6ca62a990c30d58b185c03480)
+++ b/src/main/java/Proyecto/controllers/ClientePrincipalController.java	(date 1700139295498)
@@ -275,12 +275,14 @@
                         txtTelefonoPerfil.setText(datosCliente[4]);
                         break; // Rompe el bucle una vez que se ha encontrado y configurado el cliente
                     }
+
                 }
             } catch (IOException e) {
                 e.printStackTrace();
                 mostrarAlerta("Error de Lectura", "Hubo un error al leer el archivo.", Alert.AlertType.ERROR);
             }
 
+
     }
 
     @Override
