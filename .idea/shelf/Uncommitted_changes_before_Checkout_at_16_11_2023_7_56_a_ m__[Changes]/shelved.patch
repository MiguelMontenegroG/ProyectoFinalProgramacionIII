Index: src/main/java/Proyecto/controllers/ClientePrincipalController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Proyecto.controllers;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.DatePicker;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\n\r\npublic class ClientePrincipalController {\r\n\r\n    @FXML\r\n    private ResourceBundle resources;\r\n\r\n    @FXML\r\n    private URL location;\r\n\r\n    @FXML\r\n    private Button btnActualizarCliente;\r\n\r\n    @FXML\r\n    private Button btnBuscarpq;\r\n\r\n    @FXML\r\n    private Button btnCerrarSesion;\r\n\r\n    @FXML\r\n    private Button btnEstadistica;\r\n\r\n    @FXML\r\n    private Button btnNuevo;\r\n\r\n    @FXML\r\n    private Button btnPaquetes;\r\n\r\n    @FXML\r\n    private Button btnPerfii;\r\n\r\n    @FXML\r\n    private Button btnReservar;\r\n\r\n    @FXML\r\n    private Button btnReservas;\r\n\r\n    @FXML\r\n    private Button btnVerImagenes;\r\n\r\n    @FXML\r\n    private ComboBox<?> cbxCiudad;\r\n\r\n    @FXML\r\n    private ComboBox<?> cbxClima;\r\n\r\n    @FXML\r\n    private ComboBox<?> cbxDestino;\r\n\r\n    @FXML\r\n    private ComboBox<?> cbxPaquete;\r\n\r\n    @FXML\r\n    private ComboBox<?> cbxPrecio;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colCupo;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colDuracion;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colFechaDisponible;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colNombre;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colPrecio;\r\n\r\n    @FXML\r\n    private TableColumn<?, ?> colServicioAdicional;\r\n\r\n    @FXML\r\n    private AnchorPane estadisticaForm;\r\n\r\n    @FXML\r\n    private ImageView imagenView;\r\n\r\n    @FXML\r\n    private DatePicker ldFechaIda;\r\n\r\n    @FXML\r\n    private DatePicker ldxFechaRegreso;\r\n\r\n    @FXML\r\n    private AnchorPane paquetesForm;\r\n\r\n    @FXML\r\n    private AnchorPane perfilForm;\r\n\r\n    @FXML\r\n    private AnchorPane pqForm;\r\n\r\n    @FXML\r\n    private TableView<?> tblPqCliente;\r\n\r\n    @FXML\r\n    private TextField txtCorreoPerfil;\r\n\r\n    @FXML\r\n    private TextField txtDireccionPerfil;\r\n\r\n    @FXML\r\n    private TextField txtIdPerfil;\r\n\r\n    @FXML\r\n    private TextField txtNombrePerfil;\r\n\r\n    @FXML\r\n    private TextField txtTelefonoPerfil;\r\n\r\n    @FXML\r\n    void ActualizarPerfilCliente(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void NuevopqCLiente(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void buscarPaqueteCliente(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void cerrarSesionClienteAction(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void mostrarVenPer(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void mostrarVenPerCLiente(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void mostrarVenPqCliente(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void mostraraVenMisViajesCLiente(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void reservarPq(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void verImagenesPq(ActionEvent event) {\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Proyecto/controllers/ClientePrincipalController.java b/src/main/java/Proyecto/controllers/ClientePrincipalController.java
--- a/src/main/java/Proyecto/controllers/ClientePrincipalController.java	(revision 31fa9e508a109d929c66c0734512dad3b655cf26)
+++ b/src/main/java/Proyecto/controllers/ClientePrincipalController.java	(date 1700139334949)
@@ -1,19 +1,28 @@
 package Proyecto.controllers;
 
+import java.io.IOException;
 import java.net.URL;
+import java.util.List;
 import java.util.ResourceBundle;
+
+import Proyecto.enums.Ciudades;
+import Proyecto.enums.Clima;
+import Proyecto.model.AgenciaViajes;
+import Proyecto.model.Cliente;
+import Proyecto.model.Destino;
+import Proyecto.utils.ArchivoUtils;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
-import javafx.scene.control.Button;
-import javafx.scene.control.ComboBox;
-import javafx.scene.control.DatePicker;
-import javafx.scene.control.TableColumn;
-import javafx.scene.control.TableView;
-import javafx.scene.control.TextField;
+import javafx.fxml.Initializable;
+import javafx.scene.control.*;
 import javafx.scene.image.ImageView;
 import javafx.scene.layout.AnchorPane;
 
-public class ClientePrincipalController {
+public class ClientePrincipalController implements Initializable {
+
+    String rutaArchivo = "src/main/resources/persistencia/clientes.txt";
+    public AnchorPane misViajesForm;
+    private Cliente clienteAutenticado;
 
     @FXML
     private ResourceBundle resources;
@@ -52,13 +61,13 @@
     private Button btnVerImagenes;
 
     @FXML
-    private ComboBox<?> cbxCiudad;
+    private ComboBox<Ciudades> cbxCiudad;
 
     @FXML
-    private ComboBox<?> cbxClima;
+    private ComboBox<Clima> cbxClima;
 
     @FXML
-    private ComboBox<?> cbxDestino;
+    private ComboBox<String> cbxDestino;
 
     @FXML
     private ComboBox<?> cbxPaquete;
@@ -103,7 +112,7 @@
     private AnchorPane perfilForm;
 
     @FXML
-    private AnchorPane pqForm;
+    private AnchorPane reservaForm;
 
     @FXML
     private TableView<?> tblPqCliente;
@@ -125,8 +134,53 @@
 
     @FXML
     void ActualizarPerfilCliente(ActionEvent event) {
+        // Aquí deberías obtener los nuevos datos del cliente desde la interfaz.
+        // Por ejemplo, puedes tener campos de texto editables y obtener sus valores.
+
+        String nuevoNombre = txtNombrePerfil.getText();
+        String nuevoCorreo = txtCorreoPerfil.getText();
+        String nuevaDireccion = txtDireccionPerfil.getText();
+        String nuevoTelefono = txtTelefonoPerfil.getText();
+
+        // Supongamos que obtienes los nuevos datos y actualizas el objeto Cliente.
+        clienteAutenticado.setNombreCompleto(nuevoNombre);
+        clienteAutenticado.setCorreo(nuevoCorreo);
+        clienteAutenticado.setDireccionResidencia(nuevaDireccion);
+        clienteAutenticado.setTelefono(nuevoTelefono);
+
+
+        // Ahora, actualiza los campos en la interfaz.
+        actualizarCampos();
+
+        // Muestra una alerta o realiza otras acciones según sea necesario.
+        mostrarAlerta("Cliente Actualizado", "Los datos del cliente se han actualizado con éxito.", Alert.AlertType.INFORMATION);
+        String nuevaLinea = String.format("%s,%s,%s,%s,%s,%s",
+                clienteAutenticado.getIdentificacion(),
+                clienteAutenticado.getPassword(),
+                clienteAutenticado.getNombreCompleto(),
+                clienteAutenticado.getCorreo(),
+                clienteAutenticado.getTelefono(),
+                clienteAutenticado.getDireccionResidencia());
 
+        actualizarDatosEnArchivo(nuevaLinea);
+    }
+    private void mostrarAlerta(String titulo, String mensaje, Alert.AlertType tipo) {
+        Alert alert = new Alert(tipo);
+        alert.setTitle(titulo);
+        alert.setHeaderText(null);
+        alert.setContentText(mensaje);
+        alert.showAndWait();
     }
+
+    private void actualizarCampos() {
+        txtIdPerfil.setText(clienteAutenticado.getIdentificacion());
+        txtNombrePerfil.setText(clienteAutenticado.getNombreCompleto());
+        txtCorreoPerfil.setText(clienteAutenticado.getCorreo());
+        txtDireccionPerfil.setText(clienteAutenticado.getDireccionResidencia());
+        txtTelefonoPerfil.setText(clienteAutenticado.getTelefono());
+    }
+
+
 
     @FXML
     void NuevopqCLiente(ActionEvent event) {
@@ -144,24 +198,27 @@
     }
 
     @FXML
-    void mostrarVenPer(ActionEvent event) {
-
-    }
-
-    @FXML
-    void mostrarVenPerCLiente(ActionEvent event) {
+    void mostrarVenCliente(ActionEvent event) {
+        if (event.getSource() == btnPerfii) {
+            perfilForm.setVisible(true);
+            reservaForm.setVisible(false);
+            paquetesForm.setVisible(false);
+            misViajesForm.setVisible(false);
+        } else if (event.getSource() == btnPaquetes) {
+            perfilForm.setVisible(false);
+            reservaForm.setVisible(false);
+            paquetesForm.setVisible(true);
+            misViajesForm.setVisible(false);
+        } else if (event.getSource() == btnReservas) {
+            perfilForm.setVisible(true);
+            reservaForm.setVisible(false);
+            paquetesForm.setVisible(false);
+            misViajesForm.setVisible(false);
+        }
+
 
     }
 
-    @FXML
-    void mostrarVenPqCliente(ActionEvent event) {
-
-    }
-
-    @FXML
-    void mostraraVenMisViajesCLiente(ActionEvent event) {
-
-    }
 
     @FXML
     void reservarPq(ActionEvent event) {
@@ -172,5 +229,84 @@
     void verImagenesPq(ActionEvent event) {
 
     }
+    private void actualizarDatosEnArchivo(String nuevaLinea) {
+        try {
+            List<String> datosActuales = ArchivoUtils.leerArchivoBufferedReader(rutaArchivo);
+
+            // Encuentra y reemplaza la línea existente con el nuevo dato.
+            // Supongamos que cada línea es única y se basa en la identificación del cliente.
+            for (int i = 0; i < datosActuales.size(); i++) {
+                if (datosActuales.get(i).contains(clienteAutenticado.getIdentificacion())) {
+                    datosActuales.set(i, nuevaLinea);
+                    break;  // Se encontró y actualizó la línea, sale del bucle.
+                }
+            }
+
+            // Guarda los datos actualizados en el archivo.
+            ArchivoUtils.escribirArchivoBufferedWriter(rutaArchivo, datosActuales, false);
+
+            // Muestra una alerta o realiza otras acciones según sea necesario.
+            mostrarAlerta("Actualización Exitosa", "Datos actualizados en el archivo.", Alert.AlertType.INFORMATION);
+
+        } catch (IOException e) {
+            e.printStackTrace();
+            mostrarAlerta("Error de Actualización", "Hubo un error al actualizar el archivo.", Alert.AlertType.ERROR);
+        }
+    }
+
+
+
+        public void initData(Cliente clienteAutenticado) {
+            this.clienteAutenticado = clienteAutenticado;
+
+            try {
+                // Lee los datos del archivo y busca la línea del cliente actual
+                List<String> lineasClientes = ArchivoUtils.leerArchivoBufferedReader(rutaArchivo);
+                for (String linea : lineasClientes) {
+                    String[] datosCliente = linea.split(";");
+
+                    // Supongamos que el primer campo es la identificación del cliente
+                    if (datosCliente.length > 0 && datosCliente[0].equals(clienteAutenticado.getIdentificacion())) {
+                        // Establece los datos en los campos correspondientes
+                        txtIdPerfil.setText(datosCliente[0]);
+                        txtNombrePerfil.setText(datosCliente[2]);
+                        txtCorreoPerfil.setText(datosCliente[3]);
+                        txtDireccionPerfil.setText(datosCliente[5]);
+                        txtTelefonoPerfil.setText(datosCliente[4]);
+                        break; // Rompe el bucle una vez que se ha encontrado y configurado el cliente
+                    }
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+                mostrarAlerta("Error de Lectura", "Hubo un error al leer el archivo.", Alert.AlertType.ERROR);
+            }
+
+    }
+
+    @Override
+    public void initialize(URL url, ResourceBundle resourceBundle) {
+
+        cbxCiudad.getItems().setAll(Ciudades.values());
+        cbxClima.getItems().setAll(Clima.values());
+        List<Destino> listaDestinos = ArchivoUtils.leerDestinosDesdeArchivo("src/main/resources/persistencia/destinos.txt");
+
+        System.out.println(listaDestinos);
 
+        // Llenar el ComboBox con los nombres de los destinos
+        for (Destino destino : listaDestinos) {
+            cbxDestino.getItems().add(destino.getNombre());
+        }
+
+
+        cbxDestino.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
+            if (newValue != null) {
+                // Acciones cuando se selecciona un destino en el ComboBox
+                System.out.println("Destino seleccionado: " + newValue);
+            }
+        });
+    }
+
 }
+
+
+
